{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","title","overview","poster","releaseDate","genreIds","genres","posterPath","process","genreNames","forEach","genre","includes","push","name","className","src","alt","width","map","genreName","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","params","api_key","results","data","getGenres","response","this","setState","movie","poster_path","release_date","genre_ids","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAoDeA,MAhDf,YAA+E,EAA9DC,GAA+D,IAA3DC,EAA0D,EAA1DA,MAAOC,EAAmD,EAAnDA,SAAUC,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,OAI3DC,EAAaJ,EACbK,sCAAkCL,EAClC,KAGFM,EAAa,GAQjB,OANAH,EAAOI,SAAQ,SAAAC,GACPN,EAASO,SAASD,EAAMX,KACxBS,EAAWI,KAAKF,EAAMG,SAK1B,sBAAKC,UAAU,QAAf,UACKR,GACG,qBAAKS,IAAKT,EAAYU,IAAKhB,EAAOA,MAAOA,EAAOiB,MAnBvC,MAqBb,sBAAKH,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA+Bd,IAC/B,oBAAIc,UAAU,sBAAd,SAAsCX,IACtC,oBAAIW,UAAU,SAAd,SACKN,EAAWU,KAAI,SAACC,EAAWC,GAAZ,OACZ,oBAAgBN,UAAU,gBAA1B,SACMK,GADGC,QAKjB,oBAAGN,UAAU,kBAAb,UAAiCb,EAASoB,MAAM,EAAG,KAAnD,gBCuCDC,G,kNApEbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,GACRpB,OAAQ,I,EAGVqB,U,sBAAY,8BAAAC,EAAA,sEACyBC,IAAMC,IAAN,UAAatB,+BAAb,kBAA4D,CAC7FuB,OAAQ,CACNC,QAASxB,sCAHH,uBACMyB,EADN,EACFC,KAAQD,QADN,kBAOHA,GAPG,2C,EAUZE,U,sBAAY,4BAAAP,EAAA,sEACaC,IAAMC,IAAN,UAAatB,+BAAb,qBAA+D,CACpFuB,OAAQ,CACNC,QAASxB,sCAHH,cACJ4B,EADI,yBAOHA,EAASF,KAAK5B,QAPX,2C,oMAWW+B,KAAKV,Y,cAApBD,E,gBACeW,KAAKF,Y,OAApB7B,E,OAEN+B,KAAKC,SAAS,CACZb,WAAW,EACXC,SACApB,W,qIAIM,IAAD,EAC+B+B,KAAKb,MAAnCC,EADD,EACCA,UAAWC,EADZ,EACYA,OAAQpB,EADpB,EACoBA,OAE3B,OACE,yBAASS,UAAU,YAAnB,SACIU,EAEE,qBAAKV,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGW,EAAOP,KAAI,SAAAoB,GAAK,OACb,cAAC,EAAD,CAEEvC,GAAIuC,EAAMvC,GACVC,MAAOsC,EAAMtC,MACbC,SAAUqC,EAAMrC,SAChBC,OAAQoC,EAAMC,YACdpC,YAAamC,EAAME,aACnBpC,SAAUkC,EAAMG,UAChBpC,OAAQA,GAPHiC,EAAMvC,e,GApDb2C,IAAMC,YCFxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6fbc38ee.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\n\nfunction Movie({ id, title, overview, poster, releaseDate, genreIds, genres }) {\n    const POSTER_WIDTH = 200;\n\n    // Get Poster Path\n    const posterPath = poster\n        ? process.env.REACT_APP_IMAGE_URL + poster\n        : null;\n\n    // Get Genre Names\n    let genreNames = [];\n\n    genres.forEach(genre => {\n        if (genreIds.includes(genre.id)) {\n            genreNames.push(genre.name);\n        }\n    });\n\n    return (\n        <div className=\"movie\">\n            {posterPath && (\n                <img src={posterPath} alt={title} title={title} width={POSTER_WIDTH} />\n            )}\n            <div className=\"movie__data\">\n                <h3 className=\"movie__title\">{ title }</h3>\n                <h5 className=\"movie__release-date\">{ releaseDate }</h5>\n                <ul className=\"genres\">\n                    {genreNames.map((genreName, index) =>\n                        <li key={index} className=\"genres__genre\">\n                            { genreName }\n                        </li>\n                    )}\n                </ul>\n                <p className=\"movie__overview\">{ overview.slice(0, 180) }...</p>\n            </div>\n        </div>\n    );\n}\n\nMovie.propTypes = {\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    overview: PropTypes.string,\n    poster: PropTypes.string,\n    releaseDate: PropTypes.string.isRequired,\n    genreIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n    genres: PropTypes.array.isRequired\n}\n\nexport default Movie;\n","import React from \"react\";\nimport axios from \"axios\";\n\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n    genres: []\n  };\n\n  getMovies = async () => {\n    const { data: { results }} = await axios.get(`${process.env.REACT_APP_API_URL}/movie/popular`, {\n      params: {\n        api_key: process.env.REACT_APP_API_KEY\n      }\n    });\n\n    return results;\n  };\n\n  getGenres = async () => {\n    const response = await axios.get(`${process.env.REACT_APP_API_URL}/genre/movie/list`, {\n      params: {\n        api_key: process.env.REACT_APP_API_KEY\n      }\n    });\n\n    return response.data.genres;\n  };\n\n  async componentDidMount() {\n    const movies = await this.getMovies();\n    const genres = await this.getGenres();\n\n    this.setState({\n      isLoading: false,\n      movies,\n      genres\n    });\n  }\n\n  render() {\n    const { isLoading, movies, genres } = this.state;\n\n    return (\n      <section className=\"container\">\n        { isLoading\n          ? (\n            <div className=\"loader\">\n              <span className=\"loader__text\">Loading...</span>\n            </div>\n          ) : (\n            <div className=\"movies\">\n              {movies.map(movie => (\n                  <Movie\n                    key={movie.id}\n                    id={movie.id}\n                    title={movie.title}\n                    overview={movie.overview}\n                    poster={movie.poster_path}\n                    releaseDate={movie.release_date}\n                    genreIds={movie.genre_ids}\n                    genres={genres}\n                  />\n                ))}\n            </div>\n          )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}